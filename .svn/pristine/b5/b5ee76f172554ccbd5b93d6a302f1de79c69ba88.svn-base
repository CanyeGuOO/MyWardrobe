//
//  MWClothesDisplayTestViewController.m
//  MyWardrobe
//
//  Created by Libo on 17/6/1.
//  Copyright © 2017年 残夜孤鸥. All rights reserved.
//

#import "MWClothesDisplayTestViewController.h"
#import "MWMacro.h"
#import "CaseView.h"
#import "MWClothesDisplayCell.h"
#import "MWClothesDispalySqlite.h"

#define kChangelessTag 2017
#define kInset 10
#define kCollectionViewRatio 0.59
#define kBottomButtonH 55

typedef NS_ENUM(NSInteger,CollectionViewState) {
    CollectionViewStateHide,  // 隐藏
    CollectionViewStateShow   // 显示
};

typedef NS_ENUM(NSInteger,CollectionViewFrom) {
    CollectionViewFromLeft,    // 左边
    CollectionViewFromBottom   // 底部
};

@interface MWClothesDisplayTestViewController () <UICollectionViewDataSource, UICollectionViewDelegate>

@property (nonatomic, strong) UIView *backgroundView;
@property (nonatomic, strong) UIView *leftView;
@property (nonatomic, strong) UIView *rightView;
@property (nonatomic, strong) UICollectionView *collectionView;

// 长按cell上的图片时的开始点
@property (nonatomic, assign) CGPoint beginPoint;
// 是否单击过
@property (nonatomic) BOOL didTap;
// collectionView的状态，显示和隐藏
@property (nonatomic, assign) CollectionViewState collectionViewState;
// collectionView的来源,左边和底部
@property (nonatomic, assign) CollectionViewFrom collectionViewFrom;

@property (nonatomic, strong) MWWardrobeButton *selectedLeftButton;

// 底部的2个抽屉按钮
@property (nonatomic, strong) MWDraverButton *drawerBtn1;
@property (nonatomic, strong) MWDraverButton *drawerBtn2;

@property (nonatomic, strong) UITapGestureRecognizer *tap;
@property (nonatomic, copy) NSString *imageName;

@property (nonatomic, strong) MWWardrobeButton *clothButton;

@property (nonatomic, strong) MWWardrobeButton *currentButton;
@end

// 这个标记是为了判断完左边button与移动的图片有重叠之后，就结束判断。否则平移的过程中会不断的判断，图片会一闪一闪
static BOOL flag = 0;

@implementation MWClothesDisplayTestViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.view.backgroundColor = [UIColor whiteColor];
    
    UIView *backgroundView = [[UIView alloc] initWithFrame:CGRectMake(25, 60, kScreenW-50, kScreenH-80)];
    backgroundView.backgroundColor = [UIColor greenColor];
    self.backgroundView = backgroundView;
    [self.view addSubview:backgroundView];
    
    UIView *rightView = [[UIView alloc] initWithFrame:CGRectMake((kScreenW-40)/3, 0, (kScreenW-40)*2/3, CGRectGetHeight(backgroundView.frame))];
    self.rightView = rightView;
    [self.backgroundView addSubview:rightView];
    
    [self.backgroundView addSubview:self.collectionView];
    
    UIView *leftView = [[UIView alloc] initWithFrame:CGRectMake(0, 0, (kScreenW-40)/3, CGRectGetHeight(backgroundView.frame))];
    self.leftView = leftView;
    [self.backgroundView addSubview:leftView];

    [self configerButtons];
    
}

- (void)buttonAction:(UIButton *)sender {
    [UIView animateWithDuration:1 animations:^{
        self.collectionView.mw_x = (kScreenW-40)/3;
        self.collectionView.mw_width = CGRectGetWidth(self.backgroundView.frame)-(kScreenW-40)/3;
    } completion:^(BOOL finished) {
        [self.backgroundView bringSubviewToFront:self.collectionView];
    }];
    
}

- (NSInteger)collectionView:(UICollectionView *)collectionView numberOfItemsInSection:(NSInteger)section {
    return 0;
}

- (__kindof UICollectionViewCell *)collectionView:(UICollectionView *)collectionView cellForItemAtIndexPath:(NSIndexPath *)indexPath {

    MWClothesDisplayCell *cell = [collectionView dequeueReusableCellWithReuseIdentifier:NSStringFromClass([MWClothesDisplayCell class]) forIndexPath:indexPath];
    
    cell.indexPath = indexPath;

    WEAKSELF;
    // 实现长按手势block
    cell.longPressGestureBlock = ^(UILongPressGestureRecognizer *longPress) {
        [weakSelf longPressGestureAction:longPress];
    };
    // 单击图片放大全屏
    cell.tapGestureBlock = ^(UITapGestureRecognizer *tap) {
        [weakSelf tapGestureAction:tap];
    };
    return cell;
}

#pragma mark - 长按手势触发的方法

- (void)longPressGestureAction:(UILongPressGestureRecognizer *)longPress {
    
    // 开始状态
    if (longPress.state == UIGestureRecognizerStateBegan) {
        
        self.collectionView.clipsToBounds = NO;
        
        // 获取当前触摸点所在的cell
        MWClothesDisplayCell *cell = (MWClothesDisplayCell *)longPress.view.superview.superview;
        // 将当前cell置为所有cell的最顶层，目的是为了平移cell上的图片时不会被其余cell盖住
        [self.collectionView bringSubviewToFront:cell];

        
        // 获取开始触摸的点
        self.beginPoint = [longPress locationInView:longPress.view];
        
    }
    // 移动过程中
    else if (longPress.state == UIGestureRecognizerStateChanged) {
        
        // 当前点
        CGPoint currentPoint = [longPress locationInView:longPress.view];
        
        // x偏移量
        CGFloat distanceX = currentPoint.x-self.beginPoint.x;
        // y偏移量
        CGFloat distanceY = currentPoint.y-self.beginPoint.y;
        
        // 让图片跟随触摸点移动
        CGPoint movePoint = longPress.view.center;
        movePoint.x += distanceX;
        movePoint.y += distanceY;
        longPress.view.center = movePoint;
        
        // 缩放图片
        [self scaleImageView:longPress];
        
    }
    // 平移结束
    else {
        
        flag = 0.0f;
        
        if (![self pointInButton:longPress]) {
            longPress.view.mw_origin = CGPointZero;
        } else {
            
            if (self.currentButton != self.selectedLeftButton) {
                [self.currentButton.dataArray addObject:((UIImageView *)longPress.view).image];
                [MWClothesDispalySqlite saveImage:((UIImageView *)longPress.view).image toTable:[NSString stringWithFormat:@"%ld",self.currentButton.tag-kChangelessTag+1]];
            } else {
                longPress.view.transform = CGAffineTransformMakeScale(1, 1);
                longPress.view.mw_origin = CGPointZero;
                
                return;
            }
            //
            [UIView animateWithDuration:0.5 animations:^{
                longPress.view.transform = CGAffineTransformMakeScale(0.01, 0.01);
            } completion:^(BOOL finished) {
                MWClothesDisplayCell *cell = (MWClothesDisplayCell *)longPress.view.superview.superview;
                NSIndexPath *indexPath = [self.collectionView indexPathForCell:cell];
                // 从数据库删除数据
                [MWClothesDispalySqlite deleteImage:self.selectedLeftButton.dataArray[indexPath.row-1] fromTable:[NSString stringWithFormat:@"clothes%ld",self.selectedLeftButton.tag-kChangelessTag + 1]];
                // 从数组中删除数据
                [self.selectedLeftButton.dataArray removeObjectAtIndex:indexPath.row-1];
                
                // 1.删除cell，这种删除方式和reloadData的区别是，此方式有动画效果，而且，indexPath必须存在，否则会崩溃.
                // 2.删除并刷新cell时，并不会从缓存池里删除cell，只是从collectionView表格中删除。因此，被删除的这个cell仍然会被后面的cell复用。而上面已经把longPress.view缩放到0.01了，所以当后面的cell复用这个被删除的cell时，那个cell的longPress.view的transform也是0.01，几乎看不见，所以会导致cell空白现象.所以每次刷新时都要将cell的imageview的transform复原
                if (indexPath.row) {
                    [self.collectionView deleteItemsAtIndexPaths:@[indexPath]];
                }
            }];
        }
    }
}

// 缩放移动的图片
- (void)scaleImageView:(UILongPressGestureRecognizer *)longPress {
    
    BOOL isIn = [self pointInButton:longPress];
    
    if (isIn && flag == 0) {
        flag = 1;
        [UIView animateWithDuration:0.8 animations:^{
            // 如果中心点包含在button内,让移动的图片开始按照button的size进行缩放
            longPress.view.transform = CGAffineTransformMakeScale(0.6, 0.6);
        }];
    }
    else if (![self isAccross:longPress]) {
        [UIView animateWithDuration:0.8 animations:^{
            // 恢复原图比例
            longPress.view.transform = CGAffineTransformMakeScale(1, 1);
        }];
        flag = 0;
    }
}

// 移动的图片中心点是否在某个button上
- (BOOL)pointInButton:(UILongPressGestureRecognizer *)longPress {
    for (MWWardrobeButton *button in self.leftView.subviews) {
        // 转换坐标系
        CGPoint clotheImageViewCenterPoint = [longPress.view.superview convertPoint:longPress.view.center toView:button];
        // 判断移动的图片中心点是否在button上
        if ([button pointInside:clotheImageViewCenterPoint withEvent:nil]) {
            self.currentButton = button;
            return YES;
        }
    }
    return NO;
}

//  是否重叠
- (BOOL)isAccross:(UILongPressGestureRecognizer *)longPress {
    CGRect clothImageViewRect = [longPress.view convertRect:longPress.view.bounds toView:nil];
    CGRect leftButtonContainerViewRect = [self.leftView convertRect:self.leftView.bounds toView:nil];
    if (CGRectIntersectsRect(clothImageViewRect, leftButtonContainerViewRect)) {
        return YES;
    } else {
        return NO;
    }
}

#pragma mark - 单击,放大图片

- (void)tapGestureAction:(UITapGestureRecognizer *)tap {
    _tap = tap;
    MWClothesDisplayCell *cell = (MWClothesDisplayCell *)tap.view.superview.superview;
    [self.collectionView bringSubviewToFront:cell];
    self.collectionView.clipsToBounds = NO;
    
    if (!self.didTap) {
        [self hideOtherControls:tap];
        CGRect rectInView = [tap.view convertRect:tap.view.bounds toView:nil];
        [UIView animateWithDuration:0.5 animations:^{
            
            tap.view.transform = CGAffineTransformMakeScale(kScreenW/tap.view.mw_width, kScreenH/tap.view.mw_height);
            tap.view.mw_x = -rectInView.origin.x;
            tap.view.mw_y = -rectInView.origin.y;
            
        }];
    } else {
        
        [self showOtherControls:tap];
        [UIView animateWithDuration:0.5 animations:^{
            
            tap.view.transform = CGAffineTransformMakeScale(1, 1);
            tap.view.mw_origin = CGPointZero;
        }];
    }
    
    self.didTap = !self.didTap;
}

// 放大时隐藏其余控件
- (void)hideOtherControls:(UITapGestureRecognizer *)tap {
    self.leftView.hidden = YES;
    self.collectionView.backgroundColor = [UIColor colorWithWhite:1 alpha:0];
    for (MWClothesDisplayCell *cell in self.collectionView.visibleCells) {
        NSLog(@"---%@",self.collectionView.visibleCells);
        NSLog(@"tap==%@",tap.view.superview.superview);
        if (cell != tap.view.superview.superview) {
            cell.hidden = YES;
        } else {
            cell.hidden = NO;
        }
        
    }
}

// 恢复图片时显示其余控件
- (void)showOtherControls:(UITapGestureRecognizer *)tap {
    self.leftView.hidden = NO;
    self.collectionView.backgroundColor = [UIColor colorWithWhite:1 alpha:1];
    for (MWClothesDisplayCell *cell in self.collectionView.visibleCells) {
        cell.hidden = NO;
    }
}

- (void)configerButtons {
    for (int i = 0; i < self.caseAry.count; i++) {
        CaseView *caseView = self.caseAry[i];
        UIButton *button = [[UIButton alloc] init];
        button.frame = caseView.frame;
        button.tag = caseView.tag;
        button.backgroundColor = [UIColor brownColor];
        [button addTarget:self action:@selector(buttonAction:) forControlEvents:UIControlEventTouchUpInside];
        if (CGRectGetMaxX(button.frame) <= CGRectGetMaxX(self.leftView.frame)) {
            [self.leftView addSubview:button];
        } else {
            button.mw_x -= (kScreenW-40)/3;
            [self.rightView addSubview:button];
        }
    }
}

- (UICollectionView *)collectionView {
    
    if (!_collectionView) {
        UICollectionViewFlowLayout *flowLayout = [[UICollectionViewFlowLayout alloc] init];
        _collectionView = [[UICollectionView alloc] initWithFrame:CGRectZero collectionViewLayout:flowLayout];
        _collectionView.frame = CGRectMake(0, 0, (kScreenW-40)/3, kScreenH-80);
        _collectionView.backgroundColor = [UIColor whiteColor];
        _collectionView.dataSource = self;
        _collectionView.delegate = self;
        UISwipeGestureRecognizer *swipe = [[UISwipeGestureRecognizer alloc] initWithTarget:self action:@selector(swipeAction:)];
        swipe.direction = UISwipeGestureRecognizerDirectionLeft;
        [_collectionView addGestureRecognizer:swipe];
        
    }
    return _collectionView;
}

@end

@implementation MWWardrobeButton

- (instancetype)initWithFrame:(CGRect)frame {
    if (self = [super initWithFrame:frame]) {
    }
    return self;
}

@end


@implementation MWDraverButton

- (instancetype)initWithFrame:(CGRect)frame {
    if (self = [super initWithFrame:frame]) {
    }
    return self;
}

@end
